// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String      @id @default(uuid())
  email                 String      @unique
  password              String      // Hashed password
  name                  String?
  age                   Int?
  gender                String?
  heightCm              Int?        // Stored in cm
  weightKg              Float?      // Stored in kg
  bmi                   Float?
  goals                 String[]    // e.g., ["be slimmer", "reduce carbohydrate"]
  dailyCalorieTarget    Int?        // Calculated based on BMI and goals
  currentCaloriesToday  Int         @default(0) // Reset daily by a cron job/scheduled task
  totalLifetimeCalories Int         @default(0) // Total accumulated calories
  
  activeCatId           String?
  activeCat             Cat?        @relation("UserActiveCat", fields: [activeCatId], references: [id], onDelete: SetNull)
  unlockedCats          Cat[]       @relation("UserUnlockedCats")
  
  foodLogEntries        FoodLogEntry[]

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model Cat {
  id                    String      @id @default(uuid())
  name                  String?
  videoUrl              String      // <--- THIS IS THE FIELD FOR THE VIDEO URL
  bodyType              String
  descriptionPrompt     String
  unlockCriteria        Json
  isDefault             Boolean     @default(false)
  
  usersActive           User[]      @relation("UserActiveCat")
  usersUnlocked         User[]      @relation("UserUnlockedCats")

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model FoodLogEntry {
  id                    String      @id @default(uuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  imageUrl              String      // This remains imageUrl, as it's for the static food photo
  detectedFoods         Json
  totalCalories         Int
  loggedAt              DateTime    @default(now())
}